{"version":3,"sources":["webpack:///./src/components/map/thumbtack.js","webpack:///./src/components/map/continents.js","webpack:///./src/components/map/map.js","webpack:///./src/pages/travel.js","webpack:///./src/pages/travel.module.css","webpack:///./src/components/map/continents.module.css"],"names":["Thumbtack","props","pinRef","useRef","useEffect","matrix","current","icon","children","pinhead","pin","rx","baseVal","value","ry","a","cx","cy","style","strokeWidth","width","height","x","y","ref","version","position","top","left","onClick","e","stopPropagation","clickCallback","imageDetails","image","className","styles","thumbtack","transform","fill","fillOpacity","fillRule","id","Continents","draw_continent","entry","path_html","push","d","continent_elements","continents","mapRef","c","continent","path","pins","i","selectImageCallback","numberOfItems","getItem","setMatrix","appendItem","createSVGTransformFromMatrix","useState","undefined","clickedContinent","setClickedContinent","onContinentClick","viewBox","transformOrigin","selected","Map","matrixRef","val","setScale","func","event","preventDefault","map","currentTarget","worldMapContainer","worldMap","zoom","deltaY","scale_factor","pageX","offsetLeft","pageY","offsetTop","totalZoom","tx","ty","f","transformedWidth","scrollWidth","transformedHeight","scrollHeight","mat","createSVGMatrix","translate","scale","multiply","addEventListener","removeEventListener","SecondPage","data","useStaticQuery","image_data","nodes","earth_image_details","map_data","React","currentContinent","setCurrentContinent","filterOpen","setFilterOpen","currentPictureFromPin","setCurrentPictureFromPin","currentSection","setCurrentSection","gridRef","pageTitle","title","travelNav","travelNavButton","childrenContainer","earthDescription","continentContainer","console","log","thumbnails","edges","images","pictureFromPin","isWildlife","module","exports"],"mappings":"sNAwDeA,EArDG,SAAAC,GAEd,IAAIC,EAASC,iBAAO,MAoBpB,OAlBAC,qBAAU,WACN,GAAIH,EAAMI,QAAUH,EAAOI,QAAQ,CAC/B,IAAIC,EAAOL,EAAOI,QAAQE,SAAS,GAAGA,SAAS,GAC3CC,EAAUF,EAAKC,SAAS,GACxBE,EAAMH,EAAKC,SAAS,GAExBC,EAAQE,GAAGC,QAAQC,MAAQJ,EAAQK,GAAGF,QAAQC,MAAQ,GAAKZ,EAAMI,OAAOU,EACxEN,EAAQO,GAAGJ,QAAQC,MAAS,GAAU,EAAIZ,EAAMI,OAAOU,EACvDN,EAAQQ,GAAGL,QAAQC,MAAQ,GAAW,GAAKZ,EAAMI,OAAOU,EACxDN,EAAQS,MAAMC,YAAc,EAAIlB,EAAMI,OAAOU,EAE7CL,EAAIU,MAAMR,QAAQC,MAAQ,EAAIZ,EAAMI,OAAOU,EAC3CL,EAAIW,OAAOT,QAAQC,MAAQ,GAAKZ,EAAMI,OAAOU,EAC7CL,EAAIY,EAAEV,QAAQC,MAAQ,GAAc,EAAIZ,EAAMI,OAAOU,EAAtB,IAC/BL,EAAIa,EAAEX,QAAQC,MAAQ,GAAW,GAAKZ,EAAMI,OAAOU,MAKvD,yBAAKS,IAAKtB,GACN,yBACIuB,QAAS,MACTP,MAAO,CAACQ,SAAU,WAAWC,IAAK,EAAGC,KAAM,EAAGP,OAAQ,OAAQD,MAAO,QACrES,QAAS,SAACC,GACNA,EAAEC,kBACF9B,EAAM+B,cAAc/B,EAAMgC,aAAaC,SAC3C,uBACIC,UAAWC,IAAOC,UAClBnB,MAAO,CAACoB,UAAW,aAAerC,EAAMgC,aAAaX,EAAI,OAASrB,EAAMgC,aAAaV,EAAI,mBACzF,0BACAL,MAAO,CAACqB,KAAK,UAAUC,YAAY,EAAEC,SAAS,WAC9CC,GAAI,WACJtB,MAAO,IACPC,OAAQ,KACRC,EAAG,KACHC,EAAG,OACH,6BACAY,UAAWC,IAAO3B,QAClBiC,GAAI,WACJ1B,GAAI,KACJC,GAAI,KACJN,GAAI,KACJG,GAAI,WC6DT6B,EA1GI,SAAA1C,GACf,IAAI2C,EAAiB,SAACC,GAClB,IAAIC,EAAY,GAChB,IAAK,IAAIhB,KAAKe,EACVC,EAAUC,KACN,0BAAMC,EAAGH,EAAMf,MAGvB,OAAOgB,GAEPG,EAAqB,GACrBC,EAAajD,EAAMiD,WAEnBC,EAAShD,iBAAO,MAEpB,IAAK,IAAIiD,KAAKF,EACVD,EAAmBC,EAAWE,GAAGC,WAAaT,EAAeM,EAAWE,GAAGE,MAG/E,IAAIjD,EAASJ,EAAMI,OAGfkD,EAAO,GACX,IAAK,IAAIC,KAAKvD,EAAMgC,aAAa,CAC7B,IAAIC,EAAQjC,EAAMgC,aAAauB,GAC/BD,EAAKR,KAAK,kBAAC,EAAD,CAAW1C,OAAQJ,EAAMI,OAAQ4B,aAAcC,EAAOF,cAAe/B,EAAMwD,uBAGzFrD,qBAAU,WACFC,GAAU8C,EAAO7C,UACb6C,EAAO7C,QAAQgC,UAAU1B,QAAQ8C,cACjCP,EAAO7C,QAAQgC,UAAU1B,QAAQ+C,QAAQ,GAAGC,UAAUvD,GAEtD8C,EAAO7C,QAAQgC,UAAU1B,QAAQiD,WAAWV,EAAO7C,QAAQwD,6BAA6BzD,QAjC5E,MAsCwB0D,wBAASC,GAAlDC,EAtCiB,KAsCCC,EAtCD,KAwCxB,OACI,yBAAKxB,GAAG,qBACJ,yBACIb,QAAS,WAAO5B,EAAMkE,sBAAiBH,GAAYE,OAAoBF,IACvEvC,QAAQ,MACRL,MAAM,OACNgD,QAAQ,eACR1B,GAAG,WACHlB,IAAK2B,EACLjC,MAAO,CAACmD,gBAAiB,QAGzB,uBACAxC,QAAS,SAACC,GAAOA,EAAEC,kBAAmB9B,EAAMkE,iBAAiB,UAAWD,EAAoB,WAC5FxB,GAAG,SACHJ,UAAU,yCACVH,UAA+B,UAApB8B,EAA+B7B,IAAOkC,SAAW,MAC3DrB,EAAkB,QAGnB,uBACApB,QAAS,SAACC,GAAOA,EAAEC,kBAAmB9B,EAAMkE,iBAAiB,QAASD,EAAoB,SAC1FxB,GAAG,OACHJ,UAAU,yCACVH,UAA+B,QAApB8B,EAA6B7B,IAAOkC,SAAW,MACzDrB,EAAkB,MAGnB,uBACApB,QAAS,SAACC,GAAOA,EAAEC,kBAAmB9B,EAAMkE,iBAAiB,aAAcD,EAAoB,cAC/FxB,GAAG,YACHJ,UAAU,yCACVH,UAA+B,aAApB8B,EAAkC7B,IAAOkC,SAAW,MAC9DrB,EAAkB,WAGnB,uBACApB,QAAS,SAACC,GAAOA,EAAEC,kBAAmB9B,EAAMkE,iBAAiB,UAAWD,EAAoB,WAC5FxB,GAAG,SACHJ,UAAU,yCACVH,UAA+B,UAApB8B,EAA+B7B,IAAOkC,SAAW,MAC3DrB,EAAkB,QAGnB,uBACApB,QAAS,SAACC,GAAOA,EAAEC,kBAAmB9B,EAAMkE,iBAAiB,iBAAkBD,EAAoB,kBACnGxB,GAAG,gBACHJ,UAAU,yCACVH,UAA+B,iBAApB8B,EAAsC7B,IAAOkC,SAAW,MAClErB,EAAmB,kBAGpB,uBACApB,QAAS,SAACC,GAAOA,EAAEC,kBAAmB9B,EAAMkE,iBAAiB,iBAAkBD,EAAoB,kBACnGxB,GAAG,gBACHJ,UAAU,yCACVH,UAA+B,iBAApB8B,EAAsC7B,IAAOkC,SAAW,MAClErB,EAAmB,kBAEnBM,KCxBFgB,EA3EH,SAAAtE,GACR,IAAIuB,EAAMrB,iBAAO,MACbqE,EAAYrE,mBAFC,EAGO4D,mBAAS,CAACU,IAAK,EAAGnD,EAAG,EAAGC,EAAG,IAAvCmD,GAHK,WAKbC,EAAO,SAACC,GACJA,EAAMC,iBACN,IAAIC,EAAMF,EAAMG,cAAcvE,SAASwE,kBAAkBxE,SAASyE,SAC9DC,EAAON,EAAMO,OAAS,GAAK,EAAI,EAC/BC,EAAe,EAAI,IAAOF,EAC1B5D,EAAIsD,EAAMS,MAAQT,EAAMG,cAAcO,WACtC/D,EAAIqD,EAAMW,MAAQX,EAAMG,cAAcS,UACtClD,EAAYwC,EAAIxC,UAAU1B,QAAQ,GAEtC,GAAiBoD,MAAb1B,EAAuB,CACvB,IAAImD,EAAYnD,EAAUjC,OAAOU,EAEjC,GAAImE,EAAO,GAAKO,GAAa,EACzB,OAGJ,IAAIC,EAAKpD,EAAUjC,OAAOyB,EACtB6D,EAAKrD,EAAUjC,OAAOuF,EAEtBC,EAAmBf,EAAIgB,YAAcL,EACrCM,EAAoBjB,EAAIkB,aAAeP,EAGvCP,EAAO,IACHQ,GAAM,IACNpE,EAAI,GAEJuE,EAAmBH,EAAKZ,EAAIgB,aAAe,IAC3CxE,EAAIwD,EAAIgB,aAERH,GAAM,IACNpE,EAAI,GAEJwE,EAAoBJ,EAAKb,EAAIkB,cAAgB,IAC7CzE,EAAIuD,EAAIkB,eAIpB,IAAIC,EAAMnB,EAAIoB,kBACTC,UAAU7E,EAAGC,GACb6E,MAAMhB,EAAcA,GACpBe,WAAW7E,GAAIC,GAChBiD,EAAUlE,UACV2F,EAAMA,EAAII,SAAS7B,EAAUlE,UAEjCkE,EAAUlE,QAAU2F,EAGpBvB,EAASF,EAAUlE,UAW3B,OATAF,qBAAU,WACN,GAAIoB,EAAIlB,QAEJ,OADAkB,EAAIlB,QAAQgG,iBAAiB,QAAS3B,GAC/B,WACHnD,EAAIlB,QAAQiG,oBAAoB,QAAS5B,MAGlD,CAACnD,IAGA,yBAAKA,IAAKA,EAAKW,UAAWC,IAAO0C,IAAKpC,GAAG,gBACrC,kBAAC,EAAD,CAAYQ,WAAYjD,EAAMiD,WAClBiB,iBAAkBlE,EAAMkE,iBACxB9D,OAAQmE,EAAUlE,QAClB2B,aAAchC,EAAMgC,aACpBwB,oBAAqBxD,EAAMwD,wBCuCpC+C,UAtGI,WACjB,IAAMC,EAAOC,yBAAe,cAoDxBzE,EAAewE,EAAKE,WAAWC,MAAM,GAAGC,oBACxC3D,EAAauD,EAAKK,SAASF,MAAM,GAAGE,SAtDjB,EAwDyBC,IAAMhD,SAAS,QAAxDiD,EAxDgB,KAwDEC,EAxDF,OAyDaF,IAAMhD,UAAS,GAA5CmD,EAzDgB,KAyDJC,EAzDI,OA0DmCJ,IAAMhD,cAASC,GAAlEoD,EA1DgB,KA0DOC,EA1DP,OA2DmBN,IAAMhD,SAAS,OAApDuD,EA3DkB,KA2DFC,EA3DE,KA6DjBC,EAAUrH,mBAahB,OACA,kBAAC,IAAD,CAAQsH,UAAU,SAChB,kBAAC,IAAD,CAAKC,MAAM,mBACX,yBAAKvF,UAAWC,IAAOuF,WACnB,yBAAKxF,UAA6B,OAAlBmF,EAA0BlF,IAAOwF,gBAAkB,IAAMxF,IAAOkC,SAAWlC,IAAOwF,gBAAkB/F,QAAS,kBAAM0F,EAAkB,SAArJ,cACA,yBAAKpF,UAA6B,YAAlBmF,EAA+BlF,IAAOwF,gBAAkB,IAAMxF,IAAOkC,SAAWlC,IAAOwF,gBAAiB/F,QAAS,kBAAM0F,EAAkB,cAAzJ,YACA,yBAAKpF,UAA6B,OAAlBmF,EAA0BlF,IAAOwF,gBAAkB,IAAMxF,IAAOkC,SAAWlC,IAAOwF,gBAAiB/F,QAAS,kBAAM0F,EAAkB,SAApJ,SAEJ,yBAAKpF,UAAWC,IAAOyF,mBACH,OAAlBP,EACA,6BACE,yBAAKnF,UAAWC,IAAO0F,kBAAvB,qkBACA,yBAAK3F,UAAWC,IAAO2F,oBACrB,kBAAC,EAAD,CAAK7E,WAAYA,EAAYiB,iBAnBR,SAACf,GAC5B6D,EAAoB7D,GAEpB+D,GAAeD,IAgB8DjF,aAAcA,EAAcwB,oBAxBjF,SAACD,GACzB6D,EAAyB7D,GACzBwE,QAAQC,IAAIzE,QAwBD,qCACT,kBAAC,IAAD,CACEgE,QAASA,EACTnE,UAA6B,OAAlBiE,OAA0BtD,EAAYgD,EACjDkB,WAAYzB,EAAKyB,WAAWC,MAC5BC,OAAQ3B,EAAK2B,OAAOD,MACpBlG,aAAcA,EACdoG,eAAgBjB,EAChBkB,WAA8B,YAAlBhB,Q,qBC3GpBiB,EAAOC,QAAU,CAAC,kBAAoB,0CAA0C,iBAAmB,yCAAyC,QAAU,gCAAgC,mBAAqB,2CAA2C,sBAAwB,8CAA8C,WAAa,mCAAmC,mBAAqB,2CAA2C,eAAiB,uCAAuC,UAAY,kCAAkC,gBAAkB,wCAAwC,SAAW,mC,qBCAvlBD,EAAOC,QAAU,CAAC,SAAW,qCAAqC,IAAM,gCAAgC,UAAY,sCAAsC,QAAU","file":"component---src-pages-travel-js-df65787b2f54f443c51f.js","sourcesContent":["import React, { useState, createRef, useRef, useEffect } from \"react\"\nimport styles from \"./continents.module.css\"\n\nconst Thumbtack = props => {\n\n    let pinRef = useRef(null);\n\n    useEffect(() => {\n        if (props.matrix && pinRef.current){\n            let icon = pinRef.current.children[0].children[0];\n            let pinhead = icon.children[1];\n            let pin = icon.children[0];\n \n            pinhead.rx.baseVal.value = pinhead.ry.baseVal.value = 20 / props.matrix.a;\n            pinhead.cx.baseVal.value =  34 + 3 - (3 / props.matrix.a);\n            pinhead.cy.baseVal.value = 40 + 50 - (50 / props.matrix.a);\n            pinhead.style.strokeWidth = 3 / props.matrix.a;\n\n            pin.width.baseVal.value = 2 / props.matrix.a;\n            pin.height.baseVal.value = 50 / props.matrix.a;\n            pin.x.baseVal.value = 34 + 3 - 1.5*(3 / props.matrix.a);\n            pin.y.baseVal.value = 40 + 50 - (50 / props.matrix.a);\n        }\n    });\n\n    return(\n        <svg ref={pinRef}>\n            <svg\n                version={\"1.1\"}\n                style={{position: \"absolute\",top: 0, left: 0, height: \"85px\", width: \"60px\"}}\n                onClick={(e) => {\n                    e.stopPropagation();\n                    props.clickCallback(props.imageDetails.image)}}>\n                <g\n                    className={styles.thumbtack}\n                    style={{transform: \"translate(\" + props.imageDetails.x + \"px, \" + props.imageDetails.y + \"px) scale(0.2)\"}}>\n                    <rect\n                    style={{fill:\"#9b9b9b\",fillOpacity:1,fillRule:\"evenodd\"}}\n                    id={\"rect3348\"}\n                    width={\"3\"}\n                    height={\"50\"}\n                    x={\"34\"}\n                    y={\"40\"} />\n                    <ellipse\n                    className={styles.pinhead}\n                    id={\"path3338\"}\n                    cx={\"36\"}\n                    cy={\"40\"}\n                    rx={\"20\"}\n                    ry={\"20\"} />\n                </g>\n            </svg>\n        </svg>\n    )\n}\n\nexport default Thumbtack","import React, { useState, createRef, useRef, useEffect } from \"react\"\nimport styles from \"./continents.module.css\"\nimport Thumbtack from \"./thumbtack.js\"\n\nconst Continents = props => {\n    let draw_continent = (entry) => {\n        let path_html = [];\n        for (let e in entry){\n            path_html.push(\n                <path d={entry[e]} />\n            );\n        }\n        return path_html;\n    }\n    let continent_elements = {};\n    let continents = props.continents;\n\n    let mapRef = useRef(null);\n\n    for (let c in continents) {\n        continent_elements[continents[c].continent] = draw_continent(continents[c].path)\n    }\n\n    let matrix = props.matrix;  \n\n    // generate pins\n    let pins = [];\n    for (var i in props.imageDetails){\n        let image = props.imageDetails[i];\n        pins.push(<Thumbtack matrix={props.matrix} imageDetails={image} clickCallback={props.selectImageCallback}/>);\n    }\n\n    useEffect(() => {\n        if (matrix && mapRef.current){\n            if (mapRef.current.transform.baseVal.numberOfItems){\n                mapRef.current.transform.baseVal.getItem(0).setMatrix(matrix);\n            } else {\n                mapRef.current.transform.baseVal.appendItem(mapRef.current.createSVGTransformFromMatrix(matrix));\n            }\n        }\n    });\n\n    const [clickedContinent, setClickedContinent] = useState(undefined);\n\n    return(\n        <div id=\"worldMapContainer\">\n            <svg\n                onClick={() => {props.onContinentClick(undefined); setClickedContinent(undefined);}}\n                version=\"1.0\"\n                width=\"100%\"\n                viewBox=\"40 0 385 205\"\n                id=\"worldMap\"\n                ref={mapRef}\n                style={{transformOrigin: \"0 0\"}}>\n                \n                {/*Africa */}\n                <g\n                onClick={(e) => {e.stopPropagation(); props.onContinentClick(\"africa\"); setClickedContinent(\"africa\");}}\n                id=\"africa\"\n                transform=\"matrix(1.6963e-2,0,0,-1.6963e-2,0,239)\"\n                className={clickedContinent == \"africa\" ? styles.selected : null }>\n                {continent_elements[\"africa\"]}\n                </g>\n                {/*Asia*/}\n                <g\n                onClick={(e) => {e.stopPropagation(); props.onContinentClick(\"asia\"); setClickedContinent(\"asia\");}}\n                id=\"asia\"\n                transform=\"matrix(1.6963e-2,0,0,-1.6963e-2,0,239)\"\n                className={clickedContinent == \"asia\" ? styles.selected : null }>\n                {continent_elements[\"asia\"]}\n                </g>\n                {/*Australia*/}\n                <g\n                onClick={(e) => {e.stopPropagation(); props.onContinentClick(\"australia\"); setClickedContinent(\"australia\");}}\n                id=\"australia\"\n                transform=\"matrix(1.6963e-2,0,0,-1.6963e-2,0,239)\"\n                className={clickedContinent == \"australia\" ? styles.selected : null }>\n                {continent_elements[\"australia\"]}\n                </g>\n                {/*Europe*/}\n                <g\n                onClick={(e) => {e.stopPropagation(); props.onContinentClick(\"europe\"); setClickedContinent(\"europe\");}}\n                id=\"europe\"\n                transform=\"matrix(1.6963e-2,0,0,-1.6963e-2,0,239)\"\n                className={clickedContinent == \"europe\" ? styles.selected : null }>\n                {continent_elements[\"europe\"]}\n                </g>\n                {/*South America*/}\n                <g\n                onClick={(e) => {e.stopPropagation(); props.onContinentClick(\"south america\"); setClickedContinent(\"south america\");}}\n                id=\"south_america\"\n                transform=\"matrix(1.6963e-2,0,0,-1.6963e-2,0,239)\"\n                className={clickedContinent == \"south america\" ? styles.selected : null }>\n                {continent_elements[\"south america\"]}\n                </g>\n                {/*North America*/}\n                <g\n                onClick={(e) => {e.stopPropagation(); props.onContinentClick(\"north america\"); setClickedContinent(\"north america\");}}\n                id=\"north_america\"\n                transform=\"matrix(1.6963e-2,0,0,-1.6963e-2,0,239)\"\n                className={clickedContinent == \"north america\" ? styles.selected : null }>\n                {continent_elements[\"north america\"]}\n                </g>\n                {pins}\n            </svg>\n            \n        </div>\n    )\n}\n\nexport default Continents","import React, { useRef, useEffect, useState } from \"react\"\nimport Continents from \"./continents.js\"\nimport styles from \"./continents.module.css\"\n\nconst Map = props => {\n    let ref = useRef(null);\n    let matrixRef = useRef();\n    let [scale, setScale] = useState({val: 0, x: 0, y: 0});\n\n    let func = (event) => {\n            event.preventDefault();\n            let map = event.currentTarget.children.worldMapContainer.children.worldMap;\n            let zoom = event.deltaY > 0 ? -1 : 1;\n            let scale_factor = 1 + 0.05 * zoom;\n            let x = event.pageX - event.currentTarget.offsetLeft;\n            let y = event.pageY - event.currentTarget.offsetTop;\n            let transform = map.transform.baseVal[0];\n\n            if (transform != undefined){\n                let totalZoom = transform.matrix.a;\n\n                if (zoom < 1 && totalZoom <= 1) {\n                    return;\n                }\n\n                let tx = transform.matrix.e;\n                let ty = transform.matrix.f;\n                \n                let transformedWidth = map.scrollWidth * totalZoom;\n                let transformedHeight = map.scrollHeight * totalZoom;\n\n                // Configure zoom out, latch to one corner once it is visible\n                if (zoom < 1) {\n                    if (tx >= 0) {\n                        x = 0;\n                    }\n                    if (transformedWidth + tx - map.scrollWidth <= 0) {\n                        x = map.scrollWidth;\n                    }\n                    if (ty >= 0) {\n                        y = 0;\n                    }\n                    if (transformedHeight + ty - map.scrollHeight <= 0) {\n                        y = map.scrollHeight;\n                    }\n                }\n            }\n            let mat = map.createSVGMatrix()\n                .translate(x, y)\n                .scale(scale_factor, scale_factor)\n                .translate(-x, -y);\n            if (matrixRef.current){\n                mat = mat.multiply(matrixRef.current);\n            }\n            matrixRef.current = mat;\n\n            //trigger render\n            setScale(matrixRef.current);\n    }\n    useEffect(() => {\n        if (ref.current) {\n            ref.current.addEventListener(\"wheel\", func);\n            return function () {\n                ref.current.removeEventListener(\"wheel\", func);\n              }\n        }\n    }, [ref]);\n\n    return (\n        <div ref={ref} className={styles.map} id=\"mapcontainer\">\n            <Continents continents={props.continents} \n                        onContinentClick={props.onContinentClick} \n                        matrix={matrixRef.current} \n                        imageDetails={props.imageDetails}\n                        selectImageCallback={props.selectImageCallback}/>\n        </div>\n    );\n}\n\nexport default Map","import React, { useRef } from \"react\"\nimport styles from \"./travel.module.css\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport PhotoGrid from \"../components/photogrid/grid\"\n\nimport Map from \"../components/map/map\"\n\nconst SecondPage = () => {\n  const data = useStaticQuery(graphql`\n  {\n    thumbnails: allFile(filter: {sourceInstanceName: {eq: \"earth\"}}) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 500, quality: 80, cropFocus: CENTER) {\n              originalName\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    images: allFile(filter: {sourceInstanceName: {eq: \"earth\"}}) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 2000, quality: 72) {\n              originalName\n              ...GatsbyImageSharpFluid\n              src\n            }\n          }\n        }\n      }\n    }\n    image_data: allEarthJson {\n      nodes {\n        earth_image_details {\n          continent\n          description\n          image\n          title\n          location\n          x\n          y\n          tags\n        }\n      }\n    }\n    map_data: allMapJson {\n      nodes {\n        map_data {\n          continent\n          path\n        }\n      }\n    }\n    \n  }\n  `);\n  let imageDetails = data.image_data.nodes[0].earth_image_details;\n  let continents = data.map_data.nodes[0].map_data;\n\n  const [currentContinent, setCurrentContinent] = React.useState(\"none\");\n  const [filterOpen, setFilterOpen] = React.useState(false);\n  const [currentPictureFromPin, setCurrentPictureFromPin] = React.useState(undefined);\n  let [currentSection, setCurrentSection] = React.useState(\"all\");\n\n  const gridRef = useRef();\n\n  let selectImageCallback = (i) => {\n    setCurrentPictureFromPin(i);\n    console.log(i);\n  }\n\n  let continentClickCallback = (c) => {\n    setCurrentContinent(c);\n    // scrollToGrid(gridRef);\n    setFilterOpen(!filterOpen);\n  }\n  \n  return(\n  <Layout pageTitle=\"Earth\">\n    <SEO title=\"Earth - Travel\" />\n    <div className={styles.travelNav}>\n        <div className={currentSection == \"all\" ? styles.travelNavButton + \" \" + styles.selected : styles.travelNavButton}  onClick={() => setCurrentSection(\"all\")}>All Photos</div>\n        <div className={currentSection == \"wildlife\" ? styles.travelNavButton + \" \" + styles.selected : styles.travelNavButton} onClick={() => setCurrentSection(\"wildlife\")}>Wildlife</div>\n        <div className={currentSection == \"map\" ? styles.travelNavButton + \" \" + styles.selected : styles.travelNavButton} onClick={() => setCurrentSection(\"map\")}>Map </div>\n    </div>\n    <div className={styles.childrenContainer}>\n    { currentSection == \"map\" ?\n      <div>\n        <div className={styles.earthDescription}>This page is for me as much as it is for you. Here I present to you the pictures I've taken of everything that we can find on our own wonderful planet. I'm not a photographer by any means, but I'm trying to learn. Some of the pictures here are taken with smartphone cameras, and others with a DSLR. The map is there for me to document where I've been; ultimately the goal is to cover the whole thing with pins. Feel free to zoom in and click on a pin to see what I took a picture of at that spot on Earth. If you just want to see photos, check out the Wildlife and Photos tabs.</div>\n        <div className={styles.continentContainer}>\n          <Map continents={continents} onContinentClick={continentClickCallback} imageDetails={imageDetails} selectImageCallback={selectImageCallback}/>\n        </div>\n      </div> : <></> }\n      <PhotoGrid\n        gridRef={gridRef}\n        continent={currentSection == \"all\" ? undefined : currentContinent} \n        thumbnails={data.thumbnails.edges} \n        images={data.images.edges} \n        imageDetails={imageDetails}\n        pictureFromPin={currentPictureFromPin}\n        isWildlife={currentSection == \"wildlife\"}></PhotoGrid>\n    </div>\n  </Layout>\n  );\n}\nexport default SecondPage\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"childrenContainer\":\"travel-module--childrenContainer--34_2E\",\"earthDescription\":\"travel-module--earthDescription--3JG8r\",\"hrStyle\":\"travel-module--hrStyle--1jtnH\",\"continentContainer\":\"travel-module--continentContainer--17M8g\",\"continentFilterButton\":\"travel-module--continentFilterButton--3hCZ6\",\"filterOpen\":\"travel-module--filterOpen--wYYdU\",\"filterInstructions\":\"travel-module--filterInstructions--2Tk7v\",\"continentLabel\":\"travel-module--continentLabel--f6ezg\",\"travelNav\":\"travel-module--travelNav--1PBbm\",\"travelNavButton\":\"travel-module--travelNavButton--WBdvs\",\"selected\":\"travel-module--selected--1IFnH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"continents-module--selected--3aAvp\",\"map\":\"continents-module--map--2Iyuh\",\"thumbtack\":\"continents-module--thumbtack--3lYb2\",\"pinhead\":\"continents-module--pinhead--m4pHG\"};"],"sourceRoot":""}